/* -----------------------------------------
 * $(NAME)_base.c                           
 *                                          
 * This file was automaticly generated by   
 * View Designer/X $(VDX_VERSION)
 *                 
 * User: $(USER)
 * Date: $(DATE)
 *                         
 * Don't edit this file, please!            
 *                                          
 * -----------------------------------------
 */

/* Used in createWidgets() */

#define RES_CONVERT(t,s) cvtResourceFromString(parent, t, s)
  

/* Include the header files for Motif */

#include <stdlib.h>
#include <Xm/Frame.h>
$(HEADERS,c.headers.tmpl)


$(LOCALHEADERS,c.localheaders.tmpl)


/* Include linked interfaces */

$(LINKS,c.links_forward.tmpl)


#include "$(NAME)_base.h"
#include "$(NAME).h"
#include "vcmisc.h"


/* Forward declarations */

static void $(NAME)_createWidgets(
#if NeedFunctionPrototypes
	$(NAME) *self
#endif
);

static void $(NAME)_addCallbacks(
#if NeedFunctionPrototypes
	$(NAME) *self
#endif
);

static void $(NAME)_addRelations(
#if NeedFunctionPrototypes
	$(NAME) *self
#endif
);


/* ----------------------------------------- */
/* Forward declarations for methods          */
/* ----------------------------------------- */

$(METHODS,c.cb_forward.tmpl)



/* ----------------------------------------- */
/* The initialization function of this       */
/* module                                    */
/* ----------------------------------------- */

$(NAME) *create$(NAME)_base(p, f_args, f_n)
	Widget p;
	ArgList f_args;
	Cardinal f_n;
{
	Widget parent;
	Arg args[100];
	Cardinal n = 0;
	$(NAME) *self;

	self = ($(NAME)*)XtMalloc(sizeof($(NAME)));   	/* Allocate Memory */
	memset(self, 0, sizeof($(NAME)));

	if(p)
		parent = p;
	else
		parent = getTopLevel();

	if(p) {                                 
		self->base.topWidget = self->base.$(SHELLIDENTIFIER) = 
			XtCreateWidget("$(NAME)",xmFrameWidgetClass,
				       parent, f_args, f_n);
	} else {
	        $(SHELLRESOURCES,c.resources.tmpl)

		self->base.topWidget = self->base.popupShell = self->base.$(SHELLIDENTIFIER) = 
			$(SHELLCREATION);
	}
	$(NAME)_createWidgets(self); 	/* create widgets               */
	$(NAME)_addCallbacks(self);	/* add callbacks                */
	$(NAME)_addRelations(self);	/* set resources of type widget */

	if(self->base.$(SHELLIDENTIFIER))		/* add callback to free memory  */
		XtAddCallback(self->base.$(SHELLIDENTIFIER), XmNdestroyCallback,
			      vcDestroyCallback, self);
	return self;
}



/* ----------------------------------------- */
/* Create widgets                            */
/* ----------------------------------------- */

static void $(NAME)_createWidgets(self)
$(NAME) *self;
{
  Widget parent;
  Arg args[100];
  Cardinal n;

$(WIDGETS,c.widgetcreation.tmpl)
}



/* ----------------------------------------- */
/* Add Callbacks                             */
/* ----------------------------------------- */

static void $(NAME)_addCallbacks(self)
$(NAME) *self;
{
$(CALLBACKS,c.addcallbacks.tmpl)
}



/* ----------------------------------------- */
/* Set resources of type widget              */
/* ----------------------------------------- */

void $(NAME)_addRelations(self)
$(NAME) *self;
{
$(RELATIONS,c.relations.tmpl)
}



/* ----------------------------------------- */
/* Now follows the callbacks                 */
/* ----------------------------------------- */

$(METHODS,c.base_cb.tmpl)



