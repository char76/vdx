// ---------------------------------------
// $(NAME)_base.C
//
// This file was automaticly generated by
// View Designer/X $(VDX_VERSION)
//
// User: $(USER)
// Date: $(DATE)
// 
// Don't edit this file, please !
// ---------------------------------------


// Include class definition

#include "$(NAME)_base.h"

// Include X11 header
#include <X11/xpm.h>

// Include OSF/Motif header files
#include <Xm/Frame.h>
$(HEADERS,c++.headers.tmpl)


$(LOCALHEADERS,c++.localheaders.tmpl)

$(LINKS,c++.links_header.tmpl)


#define RES_CONVERT(t,s) cvtResourceFromString(parent, t, s)


// -----------------------------------
// $(NAME)_base(parent,args,n)
// -----------------------------------

$(NAME)_base::$(NAME)_base(Widget p, ArgList f_args, Cardinal f_n)
{
  Widget parent;
  Arg args[100];
  Cardinal n = 0;

  if(p) 
    parent = p;
  else
    parent = getTopLevel();

  if(p) {
    $(SHELLIDENTIFIER) = XtCreateWidget("$(NAME)",xmFrameWidgetClass,
				       parent,f_args,f_n);
  } else { 
   $(SHELLRESOURCES,c++.resources.tmpl)
    popupShell = $(SHELLIDENTIFIER) = $(SHELLCREATION);
  }
  createWidgets();
  addCallbacks();
  addRelations();
}


// ----------------------------
// createWidgets()
// ----------------------------

void $(NAME)_base::createWidgets()
{
  Widget parent;           // the parent for every widget
  Arg args[100];           // resource list
  Cardinal n;              // number of resources

  // Now we create every Widget

$(WIDGETS,c++.widgetcreation.tmpl)
}



// ----------------------------
// addCallbacks()
// ----------------------------

void $(NAME)_base::addCallbacks()
{
$(CALLBACKS,c++.addcallbacks.tmpl)
}



// ----------------------------
// addRelations()
// ----------------------------

void $(NAME)_base::addRelations()
{
$(RELATIONS,c++.relations.tmpl)
}


// ----------------------------
// manageWidget()
// ----------------------------
void $(NAME)_base::manageWidget(Widget, XtPointer c, XtPointer)
{
  XtManageChild((Widget)c);
}


// ----------------------------
// createPixmapFromData()
// ----------------------------

Pixmap $(NAME)_base::createPixmapFromData(char **data)
{
  Pixmap pix, mask;
  XpmAttributes attr;

  memset(&attr, 0, sizeof(attr));
  attr.valuemask = XpmReturnPixels;

  if( !XpmCreatePixmapFromData(XtDisplay(VcView::getTopLevel()),
		               XRootWindowOfScreen(XtScreen(VcView::getTopLevel())),
			       data,
			       &pix, &mask, &attr) )
    return pix;
  return XmUNSPECIFIED_PIXMAP;
}

// ------------------------------------------
// createPixmapFromFile()
//
// Creating a pixmap by XpmReadFileToPixmap()
// Uses XFILESEARCHPATH to find the pixmap
// default path: /usr/lib/X11/pixmaps/%N.xpm
// ------------------------------------------

Pixmap $(NAME)_base::createPixmapFromFile(char *name)
{
  String string;
  Pixmap pix, mask;
  XpmAttributes attr;

  string = XtResolvePathname(XtDisplay(VcView::getTopLevel()),
			     "pixmaps", name, "", NULL,
			     NULL, 0, NULL);
  if(string) {
    memset(&attr, 0, sizeof(attr));
    attr.valuemask = XpmReturnPixels;
    if( !XpmReadFileToPixmap(XtDisplay(VcView::getTopLevel()),
			     XRootWindowOfScreen(
			     XtScreen(VcView::getTopLevel())),
			     string,
			     &pix, &mask, &attr) )
      return pix;
    return XmUNSPECIFIED_PIXMAP;
    XtFree(string);
  }
  return XmUNSPECIFIED_PIXMAP;
}

// ---------------------------------------------------------
// Following class methods are used as a callback.
// The method is calling a abstract virtual method, which
// must be overloaded in the derived class '$(NAME)'
// ---------------------------------------------------------

$(METHODS,c++.static_cb.tmpl)
