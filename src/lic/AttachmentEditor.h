/*
 * All files in this project are distributed under the GNU General
 * Public License. This is Free Software.
 */
/****************************************************************
 *
 *  $RCSfile: AttachmentEditor.h,v $
 *  $Date: 1999/08/27 15:30:41 $
 *  $Revision: 1.1.1.1.2.2 $
 *
 *  Copyright 1997, Dirk Laessig
 *  ALL RIGHTS RESERVED
 *  See the file Copyright for more information
 *
 *  Dirk Laessig
 *  Goettingstr. 5
 *  38106 Braunschweig
 *  Germany
 ****************************************************************/
/*
 * $Log: AttachmentEditor.h,v $
 * Revision 1.1.1.1.2.2  1999/08/27 15:30:41  dirk
 * Transform the copyright to GPL
 *
 * Revision 1.1.1.1.2.1  1998/07/01 18:31:43  lazy
 * Patches gcc 2.8
 *
 * Revision 1.1.1.1  1998/04/24 23:45:16  lazy
 * Imported to CVS
 *
 * Revision 1.2  1998/03/30 19:08:04  lazy
 * *** empty log message ***
 *
 */

// ----------------------------
// AttachmentEditor.h
//
// This file was automaticly generated by
// View Designer/X v1.1.0
//
// User: lazy@apfel.goetting5
// Date: Sat Jun 21 13:02:30 1997
//
// ----------------------------

#ifndef _AttachmentEditor_H_
#define _AttachmentEditor_H_

#include "AttachmentEditor_base.h"

#include "ControllerImpl.h"
#include <lac/CallbackMethod.h>
#include <lac/OptionMenuView.h>
#include <lac/Lstring.h>

class WidgetIconView;
class Lwidget;

class AttachmentEditor : public AttachmentEditor_base {
private:

  // we want notifications from Selectable
  class SelectionCallback : public CallbackMethod {
  private:
    AttachmentEditor *parent;
  public:
    SelectionCallback(AttachmentEditor *m) { parent = m; }
    void call();
  } selectionCallback;

  friend class SelectionCallback;

  struct Attachment {
    unsigned char attach;
    Lstring offset;
    Lstring position;
    Ref<Lwidget> widget;
  };

  class AttachData : public Lobject {
  private:
    Ref<Lwidget> child;
    void delNotify(BaseRef *r);

  public:
    AttachData(Lwidget *child);
    
    Attachment top;
    Attachment right;
    Attachment left;
    Attachment bottom;
    Boolean resizable;

    void apply();
    Lwidget *getChild() { return child; }
  };

  RefArray<AttachData> datas;
  Ref<AttachData> currentData;
  
  void displayTop();
  void displayLeft();
  void displayRight();
  void displayBottom();
  void displayResizable();

  void readTop();
  void readLeft();
  void readRight();
  void readBottom();
  void readResizable();

protected:
  virtual void do_load(Widget,XtPointer);
  virtual void do_apply(Widget,XtPointer);
  virtual void do_close(Widget,XtPointer);
  virtual void do_smallIcon(Widget,XtPointer);
  virtual void do_withIcon(Widget,XtPointer);
  virtual void do_withClassName(Widget,XtPointer);
  virtual void do_widgetMenuMap(Widget,XtPointer);
  virtual void do_onHelp(Widget,XtPointer);
  virtual void do_onContext(Widget,XtPointer);
  virtual void do_help(Widget,XtPointer);
  virtual void do_automaticLoad(Widget,XtPointer);
  virtual void topAttachmentChanged(Widget,XtPointer);
  virtual void valueChanged(Widget,XtPointer);
  virtual void rightAttachmentChanged(Widget,XtPointer);
  virtual void leftAttachmentChanged(Widget,XtPointer);
  virtual void bottomAttachmentChanged(Widget,XtPointer);


  void wmDelete() { do_close(NULL, NULL); }

  Lwidget *model;

  OptionMenuView topWidgetView;
  OptionMenuView rightWidgetView;
  OptionMenuView bottomWidgetView;
  OptionMenuView leftWidgetView;

  Ref<WidgetIconView> iconView;
  ControllerImpl controllerImpl;

  static RefArray<AttachmentEditor> allViews;
  static Ref<AttachmentEditor> automaticLoadView;
  
  AttachmentEditor(Lwidget *lwidget);
  void update(unsigned long flags);
  void setWidget(Lwidget *m);

  void setSelectedChild(Lwidget *child);

public:
  static void showView(Lwidget *lwidget);

  ~AttachmentEditor();

  Boolean saveSize() { return TRUE; }
  char *getName() { return "AttachmentEditor"; }
  static Boolean isOfValidClass(Lwidget *lwidget);
};


#endif /* Don't add stuff after this #endif */
